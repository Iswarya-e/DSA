 int wordLadderLength(string startWord, string targetWord, vector<string>& wordList) {
        // Code here
        queue<pair<string,int>> q;
        unordered_set<string> st(wordList.begin(),wordList.end());
        q.push({startWord,1});
        st.erase(startWord);
        set<char> letters;
        for(auto it:wordList)
        {
            for(int i=0;i<wordList[0].size();i++)
            {
                letters.insert(it[i]);
            }
        }
        while(!q.empty())
        {
            string word=q.front().first;
            int steps=q.front().second;
            q.pop();
            if(word==targetWord) return steps;
            for(int i=0;i<word.size();i++)
            {
                char original=word[i];
                for(auto j=*letters.begin();j!=*letters.end();j++)
                {
                    word[i]=j;
                    if(st.find(word)!=st.end())
                    {
                        q.push({word,steps+1});
                        st.erase(word);
                    }
                }
                word[i]=original;

            }
        }
        return 0;
        
    }
