
//User function Template for C++
class DisjointSet{
    public:
    vector<int> size,parent;
    DisjointSet(int nodes)
    {
        size.resize(nodes+1,1);
        parent.resize(nodes+1,0);
        for(int i=0;i<=nodes+1;i++) parent[i]=i;
    }
    int findParent(int node)
    {
        if(parent[node]==node) return node;
        return parent[node]=findParent(parent[node]);
    }
    void unionBySize(int u,int v)
    {
        int ultimateP_u=findParent(u);
        int ultimateP_v=findParent(v);
        if(ultimateP_u==ultimateP_v) return;
        if(size[ultimateP_u]<size[ultimateP_v])
        {
            parent[ultimateP_u]=ultimateP_v;
            size[ultimateP_v]+=size[ultimateP_u];
        }
        else{
            parent[ultimateP_v]=ultimateP_u;
            size[ultimateP_u]+=size[ultimateP_v];
        }
    }
    
};
class Solution{
  public:
    vector<vector<string>> accountsMerge(vector<vector<string>> &accounts) {
        // code here
        
        int n=accounts.size();
        DisjointSet ds(n);
        unordered_map<string,int> mailNodeMap;
        
        for(int i=0;i<n;i++)
        {
            for(int j=1;j<accounts[i].size();j++)
            {
                if(mailNodeMap.find(accounts[i][j])==mailNodeMap.end())
                {
                    mailNodeMap[accounts[i][j]]=i;
                }
                else{
                    ds.unionBySize(i,mailNodeMap[accounts[i][j]]);
                }
            }
        }
        vector<string> mergedList[n];
        for(auto it:mailNodeMap)
        {
            string mail=it.first;
            int node=ds.findParent(it.second);
            mergedList[node].push_back(mail);
        }
        vector<vector<string>> ans;

        for(int i=0;i<n;i++)
        {
            if(mergedList[i].size()==0) continue;
            sort(mergedList[i].begin(),mergedList[i].end());
            vector<string> temp;
            temp.push_back(accounts[i][0]);
            for(auto it:mergedList[i])
            {
                temp.push_back(it);
            }
            ans.push_back(temp);
        }
        return ans;
    }
};

