vector<int> shortestPath(int n, int m, vector<vector<int>>& edges) {
        // Code here\\
        
        
        vector<pair<int,int>> adj[n+1];
        for(auto it:edges)
        {
            adj[it[0]].push_back({it[1],it[2]});
            adj[it[1]].push_back({it[0],it[2]});
        }
        vector<int> parent(n+1);
        for(int i=0;i<=n;i++)
        {
            parent[i]=i;
        }
        queue<pair<int,int>> q;
        vector<int> dist(n+1,1e9);
        q.push({0,1});
        dist[1]=0;
        while(!q.empty())
        {
            int edgeWeight=q.front().first;
            int node=q.front().second;
            q.pop();
            for(auto it:adj[node])
            {
                if(edgeWeight+it.second<dist[it.first])
                {
                    dist[it.first]=edgeWeight+it.second;
                    parent[it.first]=node;
                    q.push({dist[it.first],it.first});
                }
            }
        }
        
        if(dist[n]==1e9) return {-1};
        vector<int> ans;
        int node=n;
        while(node!=0 && parent[node]!=node)
        {
            ans.push_back(node);
            node=parent[node];
        }
       
        ans.push_back(1);
        reverse(ans.begin(),ans.end());
        return ans;
        
    }
