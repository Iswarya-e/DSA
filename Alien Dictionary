
class Solution{
    public:
    string findOrder(string dict[], int N, int K) {
        //code here
        vector<int> adj[K];
        vector<int> inDegree(K,0);

        for(int i=0;i<N-1;i++)
        {
            string s1=dict[i];
            string s2=dict[i+1];
            int length=min(s1.size(),s2.size());
            for(int m=0;m<length;m++)
            {
                if(s1[m]!=s2[m]) 
                {
                    adj[s1[m]-'a'].push_back(s2[m]-'a');
                    inDegree[s2[m]-'a']++;
                    break;
                }
            }
        }
        queue<int> q;
        for(int i=0;i<K;i++)
        {
            if(inDegree[i]==0)
            {
                q.push(i);
            }
        }
        vector<int> ans;
        while(!q.empty())
        {
            int node=q.front();
            q.pop();
            ans.push_back(node);
            for(auto it:adj[node])
            {
                inDegree[it]--;
                if(inDegree[it]==0)
                {
                    q.push(it);
                }
            }
        }
        string TopoOrder="";
        for(auto it:ans)
        {
            TopoOrder.push_back(char(it+'a'));
        }
        return TopoOrder;
        
    }
};
