//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
public:
    bool DFSCycle(vector<int> &visited, vector<int> &path, vector<int> adj[],int src)
    {
       visited[src]=1;
       path[src]=1;
       for(auto it:adj[src])
       {
           if(visited[it]==0)
           {
               if(DFSCycle(visited,path,adj,it)==true)
               {
                   return true;
               }
           }
           else if(visited[it]==1 && path[it]==1)
           {
               return true;
           }
       }
       path[src]=0;
       return false;
    }
	bool isPossible(int N,int P, vector<pair<int, int> >& prerequisites) {
	    // Code here
	    vector<int> adj[N];
	    for(int i=0;i<prerequisites.size();i++)
	    {
	        int first=prerequisites[i].first;
	        int second=prerequisites[i].second;
	        adj[first].push_back(second);
	    }
	    vector<int> visited(N,0);
	    vector<int> path(N,0);
	    for(int i=0;i<N;i++)
	    {
	        if(visited[i]==0)
	        {
	            if(DFSCycle(visited,path, adj,i)==true)
	            {
	                return false;
	            }
	        }
	    }
	    return true;
	}
};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
    	int N, P;
        vector<pair<int, int> > prerequisites;
        cin >> N;
        cin >> P;
        for (int i = 0; i < P; ++i) {
            int x, y;
            cin >> x >> y;
            prerequisites.push_back(make_pair(x, y));
        }
        // string s;
        // cin>>s;
        Solution ob;
        if (ob.isPossible(N,P, prerequisites))
            cout << "Yes";
        else
            cout << "No";
        cout << endl;
	}
	return 0;
}
// } Driver Code Ends
