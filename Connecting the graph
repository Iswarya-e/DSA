class DisjointSet{
    public:
    vector<int> size,parent;
    DisjointSet(int nodes)
    {
        size.resize(nodes+1,1);
        parent.resize(nodes+1,0);
        for(int i=0;i<nodes+1;i++) parent[i]=i;
    }
    int findParent(int node)
    {
        if(node==parent[node]) return node;
        return parent[node]=findParent(parent[node]);
    }
    void UnionBySize(int u, int v)
    {
        int ultimateP_u=findParent(u);
        int ultimateP_v=findParent(v);
        if(ultimateP_u==ultimateP_v) return ;
        if(size[ultimateP_u]<size[ultimateP_v])
        {
            parent[ultimateP_u]=ultimateP_v;
            size[ultimateP_v]+=size[ultimateP_u];
        }
        else{
            parent[ultimateP_v]=ultimateP_u;
            size[ultimateP_u]+=size[ultimateP_v];
        }
    }
};
class Solution {
  public:
    int Solve(int n, vector<vector<int>>& edge) {
        // code here
        DisjointSet ds(n);
        int extraEdges=0;
        for(auto it:edge)
        {
            int u=it[0];
            int v=it[1];
            if(ds.findParent(u)==ds.findParent(v)) extraEdges++;
            else{
                ds.UnionBySize(u,v);
            }
        }
        int numberOfCC=0;
        for(int i=0;i<n;i++)
        {
            if(ds.parent[i]==i)  numberOfCC++;
        }
        if(extraEdges>=numberOfCC-1) return numberOfCC-1;
        return -1;
    }
};
