class DisjointSet{
        vector<int> size, parent;
        public:
        DisjointSet(int node)
        {
            size.resize(node+1,1);
            parent.resize(node+1,0);
            for(int i=0;i<=node;i++) parent[i]=i;
        }
        
        int findParent(int node)
        {
            if(node==parent[node]) 
                return node;
            return parent[node]=findParent(parent[node]);
            
        }
        void UnionBySize(int u,int v)
        {
            int ultimateP_u=findParent(u);
            int ultimateP_v=findParent(v);
            if(ultimateP_u==ultimateP_v) return;
            if(size[ultimateP_u]<size[ultimateP_v])
            {
                parent[ultimateP_u]=ultimateP_v;
                size[ultimateP_v]+=size[ultimateP_u];
            }
            else{
                parent[ultimateP_v]=ultimateP_u;
                size[ultimateP_u]+=size[ultimateP_v];
            }

        }
        
        
        
    };
    
    
    
    
    
    
    
    
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
  
    
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        // code here
       vector<pair<int,pair<int,int>>> edges;
       for(int i=0;i<V;i++)
       {
           for(auto it:adj[i])
           {
               edges.push_back({it[1],{it[0],i}});
           }
       }
       int mst=0;
       DisjointSet ds(V);
       sort(edges.begin(),edges.end());
       for(auto it:edges)
       {
           int edgeWt=it.first;
           int u=it.second.first;
           int v=it.second.second;
           if(ds.findParent(u)==ds.findParent(v)) continue;
           else{
               mst+=edgeWt;
               ds.UnionBySize(u,v);
           }
           
       }
       return mst;
    }
