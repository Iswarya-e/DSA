 int MinimumEffort(vector<vector<int>>& heights) {
        // Code here
        priority_queue< pair<int, pair<int, int>>, 
        vector<pair<int, pair<int, int>>>, 
        greater<pair<int, pair<int, int>>> > q;
        int maxRow=heights.size();
        int maxCol=heights[0].size();
        vector<vector<int>> dist(maxRow,vector<int>(maxCol,1e9));
        dist[0][0]=0;
        q.push({0,{0,0}});
        int dr[]={-1,0,1,0};
        int dc[] ={0,1,0,-1};
        while(!q.empty())
        {
            auto it=q.top();
            q.pop();
            int diff=it.first;
            int currrow=it.second.first;
            int currcol=it.second.second;

            for(int i=0;i<4;i++)
            {
                int nr=currrow+dr[i];
                int nc=currcol+dc[i];
                if(nr>=0 && nc>=0 && nr<maxRow && nc<maxCol)
                {
                    int newEff=max(abs(heights[nr][nc]-heights[currrow][currcol]),diff);

                    if(newEff<dist[nr][nc])
                    {
                        dist[nr][nc]=newEff;
                        q.push({newEff,{nr,nc}});
                    }
                }
            }
        }
        
        return dist[maxRow-1][maxCol-1];
