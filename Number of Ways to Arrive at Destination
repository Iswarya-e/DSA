int countPaths(int n, vector<vector<int>>& roads) {
        vector<pair<long,long>> adj[n];
        for(auto it:roads)
        {
            adj[it[0]].push_back({it[1],it[2]});
            adj[it[1]].push_back({it[0],it[2]});
        }
        vector<long> dist(n,LONG_MAX);
        vector<long> ways(n,0);
        priority_queue<
        pair<long,long>,vector<pair<long,long>>,
        greater<pair<long,long>>> q;
        
        q.push({0,0});
        dist[0]=0;
        ways[0]=1;
        while(!q.empty())
        {
            auto itr=q.top();
            long distance=itr.first;
            long node=itr.second;
            q.pop();
            for(auto it:adj[node])
            {
                long newDistance=distance+it.second;
                if(newDistance<dist[it.first])
                {
                    dist[it.first]=newDistance;
                    ways[it.first]=ways[node];
                    q.push({dist[it.first],it.first});
                }
                else if(newDistance==dist[it.first])
                {
                    ways[it.first]+=ways[node];

                }
            }
        }
        return ways[n-1];
        // code here
    }
