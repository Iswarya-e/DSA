
class Solution {
  public:
     void DFSToposort(vector<int> visited, vector<pair<int,int>> adj[],int src, stack<int> &s)
     {
         visited[src]=1;
         for(auto it:adj[src])
         {
             if(visited[it.first]==0)
             {
                 DFSToposort(visited,adj,it.first,s);
             }
         }
         s.push(src);
         
     }
     vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){
        // code here
        vector<pair<int,int>> adj[N];
        for(int i=0;i<M;i++)
        {
           adj[edges[i][0]].push_back({edges[i][1],edges[i][2]});
        }
        stack<int> s;
        vector<int> visited(N,0);
        
        DFSToposort(visited,adj,0,s);
        
        vector<int> dist(N,1e9);
        dist[0]=0;
        while(s.top()!=0) s.pop();
        while(!s.empty())
        {
            
            int node=s.top();
            s.pop();
            for(auto it:adj[node])
            {
                if(dist[node]+it.second<dist[it.first])
                {
                    dist[it.first]=dist[node]+it.second;
                }
            }
        }
        for(int i=0;i<N;i++)
        {
            if(dist[i]==1e9)
            {
                dist[i]=-1;
            }
        }
        return dist;
    }
};
