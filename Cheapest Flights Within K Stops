int CheapestFLight(int n, vector<vector<int>>& flights, int src, int dst, int K)  {
        // Code here
        vector<pair<int,int>> adj[n];
        for(auto it:flights)
        {
            adj[it[0]].push_back({it[1],it[2]});
        }
        queue<pair<int,pair<int,int>>> q;
        
        q.push({0,{src,0}});
        vector<int> dist(n,1e9);
        dist[src]=0;
        while(!q.empty())
        {
            int stops=q.front().first;
            int node=q.front().second.first;
            int distance=q.front().second.second;
            q.pop();
            if(stops>K) continue;

            for(auto it:adj[node])
            {
                if(distance+it.second<dist[it.first] && stops<=K+1)
                {
                    dist[it.first]=distance+it.second;
                    q.push({stops+1,{it.first,dist[it.first]}});
                }
            }
        }
        if(dist[dst]==1e9) return -1;

        return dist[dst];
    }
